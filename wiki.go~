package main

import (
        "flag"
        "html/template"
        "io/ioutil"
        "log"
        "net"
        "net/http"
        "regexp"
		"os"
		"fmt"
		"io"
)
var (
        addr = flag.Bool("addr", false, "find open address and print to final-port.txt")
)
var templates = template.Must(template.ParseFiles("edit.html", "view.html", "upload.html"))
var validPath = regexp.MustCompile("^/(edit|save|view|upload)/([a-zA-Z0-9]+)$") //this confines access to xcertain paths only

type Page struct {
    Title string
    Body []byte
}

func (p *Page) save() error {
    filename := p.Title + ".txt"
    return ioutil.WriteFile(filename, p.Body, 0600)
}

func loadPage(title string) (*Page, error) {
    filename := title + ".txt"
    body, err := ioutil.ReadFile(filename)
    if err != nil {
        return nil, err
    }
    return &Page{Title: title, Body: body}, nil
}

func viewHandler(w http.ResponseWriter, r *http.Request, title string) {
    p, err := loadPage(title)
    if err != nil {
        http.Redirect(w, r, "/edit/"+title, http.StatusFound)
        return
    }
    renderTemplate(w, "view", p)
}

func editHandler(w http.ResponseWriter, r *http.Request, title string) {
    p, err := loadPage(title)
    if err != nil {
        p = &Page{Title: title}
    }
    renderTemplate(w, "edit", p)
    
}
func uploadHandler(w http.ResponseWriter, r *http.Request, title string) {
    p, err := loadPage(title)
    if err != nil {
        p = &Page{Title: title}
    }
    renderTemplate(w, "upload", p)
    
}


func saveHandler(w http.ResponseWriter, r *http.Request, title string) {
    body := r.FormValue("body")
    p := &Page{Title: title, Body: []byte(body)}
    err := p.save()
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    http.Redirect(w, r, "/view/"+title, http.StatusFound)
}
func receiveHandler(w http.ResponseWriter, r *http.Request, title string) {
  
         file, header, err := r.FormFile("file")

         if err != nil {
                 fmt.Fprintln(w, err)
                 return
         }


         defer file.Close()

         out, err := os.Create("/tmp/uploadedfile")
         if err != nil {
                 fmt.Fprintf(w, "Unable to create the file for writing. Check your write access privilege")
                 return
         }

         defer out.Close()

         // write the content from POST to the file
         _, err = io.Copy(out, file)
         if err != nil {
                 fmt.Fprintln(w, err)
         }

         fmt.Fprintf(w, "File uploaded successfully : ")
         fmt.Fprintf(w, header.Filename)

}
func makeHandler(fn func (http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        // Here we will extract the page title from the request,
        // and call the provided handler 'fn'
        m := validPath.FindStringSubmatch(r.URL.Path)
        if m == nil {
            http.NotFound(w,r)
            return
        }
        fn(w, r, m[2])
    }
}


func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
    err := templates.ExecuteTemplate(w, tmpl+".html", p)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
    }
}


func main() {
    flag.Parse()
    http.HandleFunc("/view/", makeHandler(viewHandler))
    http.HandleFunc("/edit/", makeHandler(editHandler))
    http.HandleFunc("/save/", makeHandler(saveHandler))
    http.HandleFunc("/upload/", makeHandler(uploadHandler))
 	http.HandleFunc("/receive/", makeHandler(receiveHandler))
    if *addr {
        l, err := net.Listen("tcp", "127.0.0.1:0")
        if err != nil {
            log.Fatal(err)
        }
        err = ioutil.WriteFile("final-port.txt", []byte(l.Addr().String()), 0644)
        if err != nil {
            log.Fatal(err)
        }
        s := &http.Server{}
        s.Serve(l)
        return
    }
    http.ListenAndServe(":8080", nil)
}    
